# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-08-22 17:08
from __future__ import unicode_literals

from django.db import migrations, models

FIELD_DETECTORS_TO_FIX = [
    ('4ad5ead4-c925-493c-9970-b83f6e3f3d4b', 'fc611670-153a-4958-be5b-3a5996263f83', '78425541-fe21-4ede-9445-ca88ceb3fc4c'),
    ('1355774f-0fa4-42cd-b3f4-d4b4f7224e6b', '61c6ea2f-ad11-410d-a11f-8a6ac1edd0a5', '78425541-fe21-4ede-9445-ca88ceb3fc4c'),
    ('abb3c252-fd8b-4039-a5fd-9b6e09fdef90', 'e323b09c-1de8-42fe-a4c5-96b44b7f44cc', '78425541-fe21-4ede-9445-ca88ceb3fc4c'),
    ('edede469-b20e-444a-ae4d-50034a2f60f2', '76d50814-5a77-4135-a4e2-ffffbd72ea7d', '78425541-fe21-4ede-9445-ca88ceb3fc4c'),
    ('9ae90c33-55ad-4237-aa56-67fc2d25da65', '76d50814-5a77-4135-a4e2-ffffbd72ea7d', '78425541-fe21-4ede-9445-ca88ceb3fc4c'),
    ('967818f2-830f-4408-b6ad-667ada1b92c0', '76d50814-5a77-4135-a4e2-ffffbd72ea7d', '78425541-fe21-4ede-9445-ca88ceb3fc4c'),
    ('857ded38-b3ad-4ea4-9ba7-5207af7bdd5e', '76d50814-5a77-4135-a4e2-ffffbd72ea7d', '78425541-fe21-4ede-9445-ca88ceb3fc4c'),
    ('027cff0a-e179-4acf-a15a-8ce312f5514d', '76d50814-5a77-4135-a4e2-ffffbd72ea7d', '78425541-fe21-4ede-9445-ca88ceb3fc4c')
]

BAD_PREFIXES = ['.*', '(.*?)']


def fix_regexp(regexp_to_fix):
    regexps = regexp_to_fix.split('\n')
    for index in range(len(regexps)):
        regexp = regexps[index]
        for prefix in BAD_PREFIXES:
            if regexp.startswith(prefix):
                regexp = regexp[len(prefix):]
            if regexp.endswith(prefix):
                regexp = regexp[:-len(prefix)]
            prefix += '\r'
            if regexp.endswith(prefix):
                regexp = regexp[:-len(prefix)]
        regexps[index] = regexp
    return '\n'.join(regexps)


def fix_field_detectors(apps, schema_editor):
    DocumentFieldDetector = apps.get_model('document', 'DocumentFieldDetector')
    for detector_pk, field_pk, document_type_pk in FIELD_DETECTORS_TO_FIX:
        try:
            detector = DocumentFieldDetector.objects.get(pk=detector_pk, field_id=field_pk,
                                                         document_type_id=document_type_pk)
        except:
            continue

        if detector and detector.include_regexps:
            regexp = fix_regexp(detector.include_regexps)
            if regexp != detector.include_regexps:
                detector.include_regexps = regexp
                detector.save()


class Migration(migrations.Migration):

    dependencies = [
        ('document', '0061_auto_20180822_1708'),
    ]

    operations = [
        migrations.RunPython(fix_field_detectors, reverse_code=migrations.RunPython.noop),
    ]
