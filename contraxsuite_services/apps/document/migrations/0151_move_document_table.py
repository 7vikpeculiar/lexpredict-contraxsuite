# Generated by Django 2.2.4 on 2019-09-02 14:00
from typing import List
from django.db import migrations
from pandas import DataFrame


class DocumentTablesMigrator:
    CHUNK_SIZE = 1000

    def __init__(self,
                 apps,
                 schema_editor):
        self.db_alias = schema_editor.connection.alias
        self.Document = apps.get_model('document', 'Document')
        self.DocumentTable = apps.get_model('document', 'DocumentTable')
        self.tables_buffer = []  # List[DataFrame]
        self.documents_buffer = []  # List[Document]

    def migrate_tables(self):
        for doc in self.Document.objects.using(self.db_alias).all().iterator():
            if not doc.metadata:
                continue
            if 'tables' not in doc.metadata:
                continue
            tables = doc.metadata['tables']  # List[DocumentTable]
            if not tables:
                continue
            self.dump_tables(tables, doc)
            del doc.metadata['tables']
            self.dump_document(doc)

        self.dump_tables(None, None, True)
        self.dump_document(None, True)

    def dump_tables(self,
                    tables: List[DataFrame],
                    document = None,  # type: Document
                    force_insert: bool = False):
        if tables:
            for table in tables:
                doc_table = self.DocumentTable(document=document, table=table)
                self.tables_buffer.append(doc_table)
        if len(self.tables_buffer) >= self.CHUNK_SIZE or force_insert:
            # insert into DB
            self.save_tables()

    def save_tables(self):
        self.DocumentTable.objects.using(self.db_alias).bulk_create(
            self.tables_buffer, ignore_conflicts=True)
        self.tables_buffer = []

    def dump_document(self,
                      document,  # type:List[Document],
                      force_insert: bool = False):
        if document:
            self.documents_buffer.append(document)
        if len(self.documents_buffer) >= self.CHUNK_SIZE or force_insert:
            # insert into DB
            self.save_documents()

    def save_documents(self):
        self.Document.objects.using(self.db_alias).bulk_create(
            self.documents_buffer, ignore_conflicts=True)
        self.documents_buffer = []


def move_document_tables(apps, schema_editor):
    """
    split DocumentFieldValue to FieldValue and FieldAnnotation
    """
    mgr = DocumentTablesMigrator(apps, schema_editor)
    mgr.migrate_tables()


class Migration(migrations.Migration):

    dependencies = [
        ('document', '0150_auto_20190902_1400'),
    ]

    operations = [
        migrations.RunPython(move_document_tables,
                             reverse_code=migrations.RunPython.noop),
    ]
