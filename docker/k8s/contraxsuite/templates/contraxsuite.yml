#contrax-ingress

apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: {{ .Values.domain_name }}-issuer
spec:
  acme:
    {{ if and .Values.letsencryptenv (eq .Values.letsencryptenv "prod") }}
    server: https://acme-v02.api.letsencrypt.org/directory
    {{ else }}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    {{ end }}
    email: support@lexpredict.com
    privateKeySecretRef:
      {{ if and .Values.letsencryptenv (eq .Values.letsencryptenv "prod") }}
      name: letsencrypt-prod
      {{ else }}
      name: letsencrypt-staging
      {{ end }}
    http01: {}

---

apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: {{ .Values.domain_name }}-crt
spec:
  secretName: {{ .Values.domain_name }}-crt
  dnsNames:
  - {{ .Values.domain_name }}
  acme:
    config:
    - http01:
        ingressClass: nginx
      domains:
      - {{ .Values.domain_name }}
  issuerRef:
    name: {{ .Values.domain_name }}-issuer
    kind: Issuer

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: contrax-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    certmanager.k8s.io/issuer: {{ .Values.domain_name }}-issuer
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-body-size: 5120M
spec:
  tls:
  - hosts:
    - {{ .Values.domain_name }}
    secretName: {{ .Values.domain_name }}-crt
  rules:
  - host: {{ .Values.domain_name }}
    http:
      paths:
      - path: /
        backend:
          serviceName: contrax-nginx
          servicePort: 443

---
#contrax-webdav

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-webdav
  name: contrax-webdav
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-webdav
    spec:
      containers:
      - env:
        - name: AUTH_TYPE
          value: Basic
        - name: PASSWORD
          value: password
        - name: USERNAME
          value: user
        image: bytemark/webdav:2.4
        name: contrax-webdav
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/dav
          name: contraxsuite-data-media
      restartPolicy: Always
      volumes:
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-webdav
  name: contrax-webdav
spec:
  ports:
    - port: 80
      protocol: TCP
  selector:
    io.kompose.service: contrax-webdav
status:
  loadBalancer: {}

---
#contrax-logrotate

apiVersion: v1
data:
  logrotate.conf: |
    /logs/nginx/*.log {
        daily
        rotate 5
        compress
        copytruncate
        missingok
        su root root
    }

    /logs/contraxsuite/*.log
    /logs/contraxsuite/*.log_json {
        daily
        rotate 5
        compress
        missingok
        su root root
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-logrotate
  name: logrotate-b8391e818457f587d8a2c87547c75ace

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-logrotate
  name: contrax-logrotate
spec:
  replicas: 1
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-logrotate
    spec:
      containers:
      - image: tutum/logrotate
        name: contrax-logrotate
        resources: {}
        volumeMounts:
        - mountPath: /logs/nginx
          name: contraxsuite-internal-nginx-logs
        - mountPath: /logs/contraxsuite
          name: contraxsuite-logs
        - mountPath: /logrotate
          name: contraxsuite-logrotate
        - mountPath: /logs/pg_data
          name: postgres-data-11
      restartPolicy: Always
      volumes:
      - name: contraxsuite-internal-nginx-logs
        persistentVolumeClaim:
          claimName: contraxsuite-internal-nginx-logs
          readOnly: false
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: contraxsuite-logrotate
        persistentVolumeClaim:
          claimName: contraxsuite-logrotate
          readOnly: false
      - name: postgres-data-11
        persistentVolumeClaim:
          claimName: postgres-data-11
          readOnly: false
status: {}

---
#contrax-redis

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-redis
  name: contrax-redis
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-redis
    spec:
      containers:
      - image: redis
        name: contrax-redis
        resources: {}
        volumeMounts:
        - mountPath: /data
          name: redis-data
      hostname: contrax-redis
      restartPolicy: Always
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
          readOnly: false
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-redis
  name: contrax-redis
spec:
  ports:
    - port: 6379
      protocol: TCP
  selector:
    io.kompose.service: contrax-redis
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-tika
  name: contrax-tika
spec:
  ports:
    - port: 9998
      protocol: TCP
  selector:
    io.kompose.service: contrax-tika
status:
  loadBalancer: {}

---
{{ if eq .Values.pg_host_name "contrax-db" }}
#contrax-db

apiVersion: v1
data:
  backup-cron.conf: "# m h d month weekday user command\n\n0 0\t* * * root bash /contraxsuite/db-backup.sh\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-db
  name: pg-backup-cron-722aba991ba1ea855e6736133174990a

---

apiVersion: v1
data:
  postgresql.conf: |-
    listen_addresses = '*'
    max_connections = 1000
    shared_buffers = 1536MB
    work_mem = 7864kB
    maintenance_work_mem = 384MB
    dynamic_shared_memory_type = posix
    effective_io_concurrency = 200
    max_worker_processes = 4
    max_parallel_workers_per_gather = 2
    max_wal_size = 4GB
    min_wal_size = 2GB
    checkpoint_completion_target = 0.9
    random_page_cost = 1.1
    effective_cache_size = 4608MB
    default_statistics_target = 100
    logging_collector = on
    log_rotation_age = 1d
    log_min_duration_statement = 5000
    log_line_prefix = '%t [%p] '
    log_timezone = 'UTC'
    datestyle = 'iso, mdy'
    timezone = 'UTC'
    lc_messages = 'en_US.utf8'
    lc_monetary = 'en_US.utf8'
    lc_numeric = 'en_US.utf8'
    lc_time = 'en_US.utf8'
    default_text_search_config = 'pg_catalog.english'
    max_connections = 1000
    shared_buffers = 2GB
    effective_cache_size = 6GB
    maintenance_work_mem = 512MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 4
    effective_io_concurrency = 2
    work_mem = 524kB
    min_wal_size = 1GB
    max_wal_size = 2GB
    max_worker_processes = 4
    max_parallel_workers_per_gather = 2
    shared_preload_libraries = 'pg_stat_statements'
    pg_stat_statements.max = 1000
    pg_stat_statements.track = all
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-filebeat
  name: postgresqlconf-configmap

---

apiVersion: v1
data:
  postgresql.conf: |-
    listen_addresses = '*'
    max_connections = 1000
    shared_buffers = 1536MB
    work_mem = 7864kB
    maintenance_work_mem = 384MB
    dynamic_shared_memory_type = posix
    effective_io_concurrency = 200
    max_worker_processes = 4
    max_parallel_workers_per_gather = 2
    max_wal_size = 4GB
    min_wal_size = 2GB
    checkpoint_completion_target = 0.9
    random_page_cost = 1.1
    effective_cache_size = 4608MB
    default_statistics_target = 100
    logging_collector = on
    log_rotation_age = 1d
    log_min_duration_statement = 5000
    log_line_prefix = '%t [%p] '
    log_timezone = 'UTC'
    datestyle = 'iso, mdy'
    timezone = 'UTC'
    lc_messages = 'en_US.utf8'
    lc_monetary = 'en_US.utf8'
    lc_numeric = 'en_US.utf8'
    lc_time = 'en_US.utf8'
    default_text_search_config = 'pg_catalog.english'
    max_connections = 1000
    shared_buffers = 2GB
    effective_cache_size = 6GB
    maintenance_work_mem = 512MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 4
    effective_io_concurrency = 2
    work_mem = 524kB
    min_wal_size = 1GB
    max_wal_size = 2GB
    max_worker_processes = 4
    max_parallel_workers_per_gather = 2
    shared_preload_libraries = 'pg_stat_statements,powa,pg_stat_kcache,pg_qualstats'
    pg_stat_statements.max = 1000
    pg_stat_statements.track = all
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-filebeat
  name: postgresqlconf-powa-configmap

---

apiVersion: v1
data:
  postgres-init.sql: |
    CREATE EXTENSION IF NOT EXISTS pg_trgm;
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-db
  name: pg-init-sql-106a59094d5cd047cb07f39e68db563a

---

apiVersion: v1
data:
  db-backup.sh: |
    #!/usr/bin/env bash

    POSTGRES_MAX_BACKUP_NUMBER=3
    POSTGRES_DB=contrax1
    POSTGRES_USER=contrax1

    BACKUP_DIR=/backup/db
    BACKUP_FILE=backup_$(date +%Y-%m-%d_%H-%M-%S).backup
    MAX_BACKUP_NUMBER=$((${POSTGRES_MAX_BACKUP_NUMBER}+1))

    if [ ! -z ${POSTGRES_MAX_BACKUP_NUMBER} ] && [ ${POSTGRES_MAX_BACKUP_NUMBER} -gt 0 ]; then
        mkdir -p ${BACKUP_DIR}
        pushd ${BACKUP_DIR}

        mkdir -p ./tmp

        pg_dump --dbname=${POSTGRES_DB} --username=${POSTGRES_USER} --format=c -Z 9 --file=./tmp/${BACKUP_FILE}
        mv ./tmp/${BACKUP_FILE} ${BACKUP_FILE}
        rm -r ./tmp

        ls -tp | grep -v '/$' | tail -n +${MAX_BACKUP_NUMBER} | xargs -I {} rm -- {}

        popd
    fi
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-db
  name: db-backup-configmap

---

apiVersion: v1
data:
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD

    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    local   all             postgres                                trust
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            trust
    host	all		all		0.0.0.0/0		md5
    # IPv6 local connections:
    host    all             all             ::1/128                 trust
    # Allow replication connections from localhost, by a user with the
    # replication privilege.
    local   replication     all                                     trust
    host    replication     all             127.0.0.1/32            trust
    host    replication     all             ::1/128                 trust
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-db
  name: pg-hba-configmap

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-db
  name: contrax-db
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-db
    spec:
      containers:
      {{ if .Values.powa }}
      - args:
        - bash
        - -c
        - apt-get update && apt-get install -y --no-install-recommends postgresql-11-powa postgresql-11-pg-qualstats postgresql-11-pg-stat-kcache postgresql-11-hypopg && rm -rf /var/lib/apt/lists/* && service cron start && /usr/local/bin/docker-entrypoint.sh postgres -c config_file=/contraxsuite/postgresql.conf -c hba_file=/contraxsuite/pg_hba.conf
      {{ else }}
      - args:
        - bash
        - -c
        - service cron start && /usr/local/bin/docker-entrypoint.sh postgres -c config_file=/contraxsuite/postgresql.conf -c hba_file=/contraxsuite/pg_hba.conf
      {{ end }}
        env:
        - name: PGDATA
          value: /var/lib/contraxsuite-postgres
        - name: POSTGRES_DB
          value: contrax1
        - name: POSTGRES_PASSWORD
          value: contrax1
        - name: POSTGRES_USER
          value: contrax1
        image: postgres:11.5
        name: contrax-db
        ports:
        - containerPort: 5432
        resources:
          limits:
            memory: "{{ .Values.postgres_memory_limit }}"
          requests:
            memory: "{{ .Values.postgres_memory_request }}"
        volumeMounts:
        - mountPath: /var/lib/contraxsuite-postgres
          name: postgres-data-11
        - mountPath: /contraxsuite/db-backup.sh
          name: db-backup
          subPath: db-backup.sh
        - mountPath: /backup
          name: backup
        - mountPath: /contraxsuite/postgresql.conf
          name: contraxsuite-postgresqlconf
          subPath: postgresql.conf
        - mountPath: /etc/crontab
          name: postgresql-crontab
          subPath: backup-cron.conf
        - mountPath: /docker-entrypoint-initdb.d/postgres_init.sql
          name: postgresql-init
          subPath: postgres-init.sql
        - mountPath: /contraxsuite/pg_hba.conf
          name: pg-hba
          subPath: pg_hba.conf
      restartPolicy: Always
      volumes:
      - name: postgres-data-11
        persistentVolumeClaim:
          claimName: postgres-data-11
          readOnly: false
      - name: backup
        persistentVolumeClaim:
          claimName: backup
          readOnly: false
      - name: contraxsuite-postgresqlconf
        configMap:
          {{ if .Values.powa }}
          name: postgresqlconf-powa-configmap
          {{ else }}
          name: postgresqlconf-configmap
          {{ end }}
      - name: postgresql-crontab
        configMap:
          name: pg-backup-cron-722aba991ba1ea855e6736133174990a
      - name: postgresql-init
        configMap:
          name: pg-init-sql-106a59094d5cd047cb07f39e68db563a
      - name: db-backup
        configMap:
          name: db-backup-configmap
      - name: pg-hba
        configMap:
          name: pg-hba-configmap
status: {}

---
{{ end }}

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-db
  name: contrax-db
spec:
  ports:
  - name: "54320"
    port: 54320
    targetPort: 5432
  - name: "5432"
    port: 5432
    targetPort: 5432
  selector:
    io.kompose.service: contrax-db
status:
  loadBalancer: {}

---
#contrax-elasticsearch

apiVersion: v1
data:
  elasticsearch.yml: |-
    cluster.name: "docker-cluster"
    network.host: 0.0.0.0

    # minimum_master_nodes need to be explicitly set when bound on a public IP
    # set to 1 to allow single node clusters
    # Details: https://github.com/elastic/elasticsearch/pull/17288
    discovery.zen.minimum_master_nodes: 1

    thread_pool:
        search:
            size: 25
            queue_size: 6000
            min_queue_size: 4000
            max_queue_size: 6000
            target_response_time: 1s
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-elasticsearch
  name: elasticsearch-c180986b58ffcd28d82c5f1046fb6dce

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-elasticsearch
  name: contrax-elasticsearch
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-elasticsearch
    spec:
      initContainers:
      - name: init-sysctl
        image: busybox:1.27.2
        command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        securityContext:
          privileged: true
      containers:
      - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.5.4
        name: contrax-elasticsearch
        resources:
          limits:
            memory: "4294967296"
          requests:
            memory: "0"
        volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-data
      restartPolicy: Always
      volumes:
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: elasticsearch-data
          readOnly: false
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-elasticsearch
  name: contrax-elasticsearch
spec:
  ports:
    - port: 9200
      protocol: TCP
  selector:
    io.kompose.service: contrax-elasticsearch
status:
  loadBalancer: {}

---
#contrax-filebeat

apiVersion: v1
data:
  filebeat.yml: |-
    filebeat.modules:
    - module: nginx
      access:
        enabled: true
        var.paths: ["/data/nginx_logs/access.log*"]
      error:
        enabled: true
        var.paths: ["/data/nginx_logs/error.log*"]
    - module: postgresql
      log:
        enabled: true
        var.paths: ["/data/pg_data/pg_log/*.log*"]
    filebeat.prospectors:
    - type: log
      paths:
        - /data/logs/celery-*.log_json
      fields:
        logger: celery
      json.keys_under_root: true
      json.add_error_key: true
      json.overwrite_keys: true
    - type: log
      paths:
        - /data/logs/django-*.log_json
      fields:
        logger: django
      json.keys_under_root: true
      json.add_error_key: true
      json.overwrite_keys: true
    - type: log
      paths:
        - /data/logs/db-*.log_json
      fields:
        logger: db
      json.keys_under_root: true
      json.add_error_key: true
      json.overwrite_keys: true
    - type: log
      paths:
        - /data/logs/frontend-*.log_json
      fields:
        logger: frontend
      json.keys_under_root: true
      json.add_error_key: true
      json.overwrite_keys: true

    # If changing index names here - don't forget to change them in settings.py.
    # Celery task logs are loaded in Django UI by requesting Elasticsearch
    # with index pattern specified in settings.LOGGING_ELASTICSEARCH_INDEX_TEMPLATE

    output.elasticsearch:
      hosts: ["http://contrax-elasticsearch:9200"]
      index: "filebeat-%{[beat.version]}-%{+yyyy.MM.dd}"

    setup.template.name: "filebeat"
    setup.template.pattern: "filebeat-*"
    setup.dashboards.index: "filebeat-*"
    setup.template.overwrite: true

    setup.dashboards.enabled: true

    setup.kibana.host: "contrax-kibana"
    setup.kibana.protocol: "http"
    #setup.kibana.path: "/kibana"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-filebeat
  name: filebeat-1b84ea4a4555e9c33f0ea04461533050

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-filebeat
  name: contrax-filebeat
spec:
  replicas: 1
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-filebeat
    spec:
      containers:
      - image: docker.elastic.co/beats/filebeat:6.5.4
        name: contrax-filebeat
        resources:
          requests:
            cpu: 0
            memory: 0
          limits:
            cpu: 500m
            memory: "1073741824"
        volumeMounts:
        - mountPath: /data/pg_data
          name: postgres-data-11
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /usr/share/filebeat/data
          name: filebeat-data
        - mountPath: /data/nginx_logs
          name: contraxsuite-internal-nginx-logs
        - mountPath: /usr/share/filebeat/filebeat.yml
          name: filebeat-yml
          subPath: filebeat.yml
      restartPolicy: Always
      volumes:
      - name: postgres-data-11
        persistentVolumeClaim:
          claimName: postgres-data-11
          readOnly: false
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: filebeat-data
        persistentVolumeClaim:
          claimName: filebeat-data
          readOnly: false
      - name: contraxsuite-internal-nginx-logs
        persistentVolumeClaim:
          claimName: contraxsuite-internal-nginx-logs
          readOnly: false
      - name: filebeat-yml
        configMap:
          name: filebeat-1b84ea4a4555e9c33f0ea04461533050
status:
  currentNumberScheduled: 0
  desiredNumberScheduled: 0
  numberMisscheduled: 0

---
#contrax-kibana

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-kibana
  name: contrax-kibana
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-kibana
    spec:
      containers:
      - env:
        - name: ELASTICSEARCH_URL
          value: http://contrax-elasticsearch:9200
        - name: SERVER_BASEPATH
          value: /kibana
        image: docker.elastic.co/kibana/kibana-oss:6.5.4
        name: contrax-kibana
        resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-kibana
  name: contrax-kibana
spec:
  ports:
    - port: 5601
      protocol: TCP
  selector:
    io.kompose.service: contrax-kibana
status:
  loadBalancer: {}

---
#contrax-metricbeat

apiVersion: v1
data:
  metricbeat.yml: |-
    metricbeat.modules:
    - module: system
      metricsets:
        - cpu
        - filesystem
        - memory
        - network
        - process
      enabled: true
      period: 10s
      processes: ['.*']
      cpu_ticks: false
    - module: docker
      metricsets: ["container", "cpu", "diskio", "healthcheck", "info", "memory", "network"]
      hosts: ["unix:///var/run/docker.sock"]
      period: 10s
    - module: postgresql
      metricsets:
        - database
        - bgwriter
        - activity
      period: 10s
      hosts: ["postgres://contrax-db:5432"]
      username: contrax1
      password: contrax1
    - module: redis
      metricsets: ["info", "keyspace"]
      period: 10s
      hosts: ["contrax-redis:6379"]
    - module: elasticsearch
      metricsets: ["node", "node_stats"]
      period: 10s
      hosts: ["http://contrax-elasticsearch:9200"]
    - module: rabbitmq
      metricsets: ["node", "queue"]
      period: 10s
      hosts: ["contrax-rabbitmq:15672"]
      username: contrax1
      password: contrax1

    output.elasticsearch:
      hosts: ["http://contrax-elasticsearch:9200"]
      index: "metricbeat-%{[beat.version]}-%{+yyyy.MM.dd}"

    setup.template.name: "metricbeat"
    setup.template.pattern: "metricbeat-*"
    setup.dashboards.index: "metricbeat-*"
    setup.template.overwrite: true

    setup.dashboards.enabled: true

    setup.kibana.host: "contrax-kibana"
    setup.kibana.protocol: "http"
    #setup.kibana.path: "/kibana"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-metricbeat
  name: metricbeat-99b4e27a4f53a7c722f3e17e204d86c2

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-metricbeat
  name: contrax-metricbeat
spec:
  replicas: 0
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-metricbeat
    spec:
      containers:
      - args:
        - -e
        - -system.hostfs=/hostfs
        image: docker.elastic.co/beats/metricbeat:6.5.4
        name: contrax-metricbeat
        resources:
          limits:
            cpu: "1"
            memory: "2147483648"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - mountPath: /usr/share/metricbeat/data
          name: metricbeat-data
          readOnly: false
        - mountPath: /hostfs/var/run/docker.sock
          name: contrax-metricbeat-claim1
        - mountPath: /hostfs/proc
          name: contrax-metricbeat-claim2
          readOnly: true
        - mountPath: /hostfs/sys/fs/cgroup
          name: contrax-metricbeat-claim3
          readOnly: true
        - mountPath: /hostfs
          name: contrax-metricbeat-claim4
          readOnly: true
        - mountPath: /usr/share/metricbeat/metricbeat.yml
          name: metricbeat-yml
          subPath: metricbeat.yml
      restartPolicy: Always
      volumes:
      - name: metricbeat-data
        persistentVolumeClaim:
          claimName: metricbeat-data
          readOnly: false
      - name: contrax-metricbeat-claim1
        hostPath:
          path: /var/run/docker.sock
          type: File
      - name: contrax-metricbeat-claim2
        hostPath:
          path: /proc
          type: Directory
      - name: contrax-metricbeat-claim3
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      - name: contrax-metricbeat-claim4
        hostPath:
          path: /
          type: Directory
      - name: metricbeat-yml
        configMap:
          name: metricbeat-99b4e27a4f53a7c722f3e17e204d86c2
status: {}

---
#contrax-rabbitmq

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-rabbitmq
  name: contrax-rabbitmq
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-rabbitmq
    spec:
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_PASS
          value: contrax1
        - name: RABBITMQ_DEFAULT_USER
          value: contrax1
        - name: RABBITMQ_DEFAULT_VHOST
          value: contrax1_vhost
        image: rabbitmq:3-management
        name: contrax-rabbitmq
        resources:
          requests:
            cpu: {{ .Values.rabbitmq_cpu_request }}
            memory: {{ .Values.rabbitmq_memory_request }}
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
      hostname: contrax-rabbitmq
      restartPolicy: Always
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-data
          readOnly: false
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-rabbitmq
  name: contrax-rabbitmq
spec:
  ports:
    - port: 5672
      protocol: TCP
  selector:
    io.kompose.service: contrax-rabbitmq
status:
  loadBalancer: {}

---
#contrax-nginx

apiVersion: v1
data:
  nginx-customer.conf: |
    # no customer config included
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-nginx
  name: nginx-cust-295d861acdf477ca42d4d66a2a29680a

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-nginx
  name: contrax-nginx
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-nginx
    spec:
      containers:
      - image: nginx:stable
        name: contrax-nginx
        resources:
          limits:
            cpu: "1"
            memory: "4203741184"
          requests:
            cpu: "0"
            memory: "0"
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        ports:
        - containerPort: 8080
        - containerPort: 4443
        - containerPort: 4444
        resources: {}
        volumeMounts:
        - mountPath: /etc/nginx
          name: contraxsuite-nginx-conf
        - mountPath: /etc/nginx/certificates
          name: contraxsuite-nginx-certs
        - mountPath: /contraxsuite_frontend
          name: contraxsuite-frontend
        - mountPath: /contraxsuite_services/staticfiles
          name: contraxsuite-static-files
        - mountPath: /data/media
          name: contraxsuite-data-media
        - mountPath: /var/log/nginx
          name: contraxsuite-internal-nginx-logs
        - mountPath: /etc/nginx/server_include
          name: contraxsuite-nginx-server-include
        - mountPath: /etc/nginx/nginx-customer.conf
          name: nginx-cust
          subPath: nginx-customer.conf
      restartPolicy: Always
      volumes:
      - name: contraxsuite-nginx-conf
        persistentVolumeClaim:
          claimName: contraxsuite-nginx-conf
          readOnly: false
      - name: contraxsuite-nginx-certs
        persistentVolumeClaim:
          claimName: contraxsuite-nginx-certs
          readOnly: false
      - name: contraxsuite-frontend
        persistentVolumeClaim:
          claimName: contraxsuite-frontend
          readOnly: false
      - name: contraxsuite-static-files
        persistentVolumeClaim:
          claimName: contraxsuite-static-files
          readOnly: false
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
      - name: contraxsuite-internal-nginx-logs
        persistentVolumeClaim:
          claimName: contraxsuite-internal-nginx-logs
          readOnly: false
      - name: contraxsuite-nginx-server-include
        persistentVolumeClaim:
          claimName: contraxsuite-nginx-server-include
          readOnly: false
      - name: nginx-cust
        configMap:
          name: nginx-cust-295d861acdf477ca42d4d66a2a29680a
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-nginx
  name: contrax-nginx
spec:
  ports:
  - name: "80"
    port: 80
    targetPort: 8080
  - name: "443"
    port: 443
    targetPort: 4443
  - name: "4444"
    port: 4444
    targetPort: 4444
  selector:
    io.kompose.service: contrax-nginx
  #externalIPs:
  #- 172.31.28.126
status:
  loadBalancer: {}

---
#contrax-jupyter
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-jupyter
  name: contrax-jupyter
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-jupyter
    spec:
      containers:
      - args:
        - /start.sh
        - jupyter
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /advanced/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: django.core.mail.backends.console.EmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: contrax-elasticsearch
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: contrax-rabbitmq
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_UWSGI
          value: contrax-uwsgi
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: contrax1
        - name: DOCKER_RABBITMQ_USER
          value: contrax1
        - name: DOCKER_RABBITMQ_VHOST
          value: contrax1_vhost
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        image: {{ .Values.docker_image }}
        name: contrax-jupyter
        resources:
          limits:
            cpu: "1"
            memory: "4203741184"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - mountPath: /deployment_uuid
          name: contraxsuite-deployment-uuid
        - mountPath: /etc/nginx/certificates
          name: contraxsuite-nginx-certs
        - mountPath: /contraxsuite_services/staticfiles
          name: contraxsuite-static-files
        - mountPath: /third_party_dependencies
          name: contraxsuite-third-party-dependencies
        - mountPath: /data/media
          name: contraxsuite-data-media
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /var/log/nginx
          name: contraxsuite-internal-nginx-logs
        - mountPath: /contraxsuite_services/notebooks/persistent_volume
          name: contraxsuite-notebooks
        - mountPath: /contraxsuite_services/jupyter_add_req
          name: contraxsuite-jupyter-add-req
        - mountPath: /ssl_certs
          name: contraxsuite-ssl-certs
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: contraxsuite-deployment-uuid
        persistentVolumeClaim:
          claimName: contraxsuite-deployment-uuid
          readOnly: false
      - name: contraxsuite-nginx-certs
        persistentVolumeClaim:
          claimName: contraxsuite-nginx-certs
          readOnly: false
      - name: contraxsuite-static-files
        persistentVolumeClaim:
          claimName: contraxsuite-static-files
          readOnly: false
      - name: contraxsuite-third-party-dependencies
        persistentVolumeClaim:
          claimName: cephfs-pvc
          readOnly: false
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: contraxsuite-internal-nginx-logs
        persistentVolumeClaim:
          claimName: contraxsuite-internal-nginx-logs
          readOnly: false
      - name: contraxsuite-notebooks
        persistentVolumeClaim:
          claimName: contraxsuite-notebooks
          readOnly: false
      - name: contraxsuite-jupyter-add-req
        persistentVolumeClaim:
          claimName: contraxsuite-jupyter-add-req
          readOnly: false
      - name: contraxsuite-ssl-certs
        persistentVolumeClaim:
          claimName: contraxsuite-ssl-certs
          readOnly: false
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-jupyter
  name: contrax-jupyter
spec:
  ports:
    - port: 8888
      protocol: TCP
  selector:
    io.kompose.service: contrax-jupyter
status:
  loadBalancer: {}

---
#contrax-celery

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-celery
  name: contrax-celery
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-celery
    spec:
      containers:
      - args:
        - /start.sh
        - celery-single
        env:
        - name: DOCKER_CELERY_CONCURRENCY
          value: "4"
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /advanced/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: django.core.mail.backends.console.EmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: contrax-elasticsearch
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "9200"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: contrax-rabbitmq
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_UWSGI
          value: contrax-uwsgi
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: contrax1
        - name: DOCKER_RABBITMQ_USER
          value: contrax1
        - name: DOCKER_RABBITMQ_VHOST
          value: contrax1_vhost
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        - name: LEXNLP_TIKA_PARSER_MODE
          value: pdf_ocr
        image: {{ .Values.docker_image }}
        name: contrax-celery
        resources:
          limits:
            cpu: "{{ .Values.celery_cpu_limit }}"
            memory: "0"
          requests:
            cpu: "{{ .Values.celery_cpu_request }}"
            memory: "0"
        volumeMounts:
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /data/celery_worker_state
          name: celery-worker-state
        - mountPath: /ssl_certs
          name: contraxsuite-ssl-certs
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: celery-worker-state
        persistentVolumeClaim:
          claimName: celery-worker-state
          readOnly: false
      - name: contraxsuite-ssl-certs
        persistentVolumeClaim:
          claimName: contraxsuite-ssl-certs
          readOnly: false
status: {}

---
#contrax-celery-doc-load

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-celery-doc-load
  name: contrax-celery-doc-load
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-celery-doc-load
    spec:
      containers:
      - args:
        - /start.sh
        - celery-load
        env:
        - name: DOCKER_CELERY_CONCURRENCY
          value: "1"
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /advanced/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: django.core.mail.backends.console.EmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: contrax-elasticsearch
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "9200"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: contrax-rabbitmq
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_UWSGI
          value: contrax-uwsgi
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: contrax1
        - name: DOCKER_RABBITMQ_USER
          value: contrax1
        - name: DOCKER_RABBITMQ_VHOST
          value: contrax1_vhost
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        - name: LEXNLP_TIKA_PARSER_MODE
          value: pdf_ocr
        - name: SHARED_USER_ID
          value: "82"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        image: {{ .Values.docker_image }}
        name: contrax-celery-doc-load
        resources:
          limits:
            cpu: "{{ .Values.celery_doc_load_cpu_limit }}"
          requests:
            cpu: "{{ .Values.celery_doc_load_cpu_request }}"
        volumeMounts:
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /data/celery_worker_state
          name: celery-worker-state
        - mountPath: /ssl_certs
          name: contraxsuite-ssl-certs
      restartPolicy: Always
      imagePullSecrets:
      - name: contraxsuitesecret
      volumes:
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: celery-worker-state
        persistentVolumeClaim:
          claimName: celery-worker-state
          readOnly: false
      - name: contraxsuite-ssl-certs
        persistentVolumeClaim:
          claimName: contraxsuite-ssl-certs
          readOnly: false
status: {}

---
#contrax-celery-beat

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-celery-beat
  name: contrax-celery-beat
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-celery-beat
    spec:
      containers:
      - args:
        - /start.sh
        - celery-beat
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /advanced/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: django.core.mail.backends.console.EmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: contrax-elasticsearch
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "9200"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: contrax-rabbitmq
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_UWSGI
          value: contrax-uwsgi
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_CERTIFICATE
        - name: DOCKER_NGINX_CERTIFICATE_KEY
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: contrax1
        - name: DOCKER_RABBITMQ_USER
          value: contrax1
        - name: DOCKER_RABBITMQ_VHOST
          value: contrax1_vhost
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        image: {{ .Values.docker_image }}
        name: contrax-celery-beat
        resources:
          limits:
            cpu: "2"
            memory: "4294967296"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /data/celery_worker_state
          name: celery-worker-state
        - mountPath: /ssl_certs
          name: contraxsuite-ssl-certs
        - mountPath: /data/media
          name: contraxsuite-data-media
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: celery-worker-state
        persistentVolumeClaim:
          claimName: celery-worker-state
          readOnly: false
      - name: contraxsuite-ssl-certs
        persistentVolumeClaim:
          claimName: contraxsuite-ssl-certs
          readOnly: false
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
status: {}

---
#contrax-flower

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-flower
  name: contrax-flower
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-flower
    spec:
      containers:
      - args:
        - /start.sh
        - flower
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /advanced/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: django.core.mail.backends.console.EmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: contrax-elasticsearch
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "9200"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: contrax-rabbitmq
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_UWSGI
          value: contrax-uwsgi
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: contrax1
        - name: DOCKER_RABBITMQ_USER
          value: contrax1
        - name: DOCKER_RABBITMQ_VHOST
          value: contrax1_vhost
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        image: {{ .Values.docker_image }}
        name: contrax-flower
        resources:
          limits:
            cpu: "1"
            memory: "2147483648"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - mountPath: /deployment_uuid
          name: contraxsuite-deployment-uuid
        - mountPath: /etc/nginx/certificates
          name: contraxsuite-nginx-certs
        - mountPath: /contraxsuite_services/staticfiles
          name: contraxsuite-static-files
        - mountPath: /third_party_dependencies
          name: contraxsuite-third-party-dependencies
        - mountPath: /data/media
          name: contraxsuite-data-media
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /var/log/nginx
          name: contraxsuite-internal-nginx-logs
        - mountPath: /contraxsuite_services/notebooks
          name: contraxsuite-notebooks
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: contraxsuite-deployment-uuid
        persistentVolumeClaim:
          claimName: contraxsuite-deployment-uuid
          readOnly: false
      - name: contraxsuite-nginx-certs
        persistentVolumeClaim:
          claimName: contraxsuite-nginx-certs
          readOnly: false
      - name: contraxsuite-static-files
        persistentVolumeClaim:
          claimName: contraxsuite-static-files
          readOnly: false
      - name: contraxsuite-third-party-dependencies
        persistentVolumeClaim:
          claimName: contraxsuite-third-party-dependencies
          readOnly: false
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: contraxsuite-internal-nginx-logs
        persistentVolumeClaim:
          claimName: contraxsuite-internal-nginx-logs
          readOnly: false
      - name: contraxsuite-notebooks
        persistentVolumeClaim:
          claimName: contraxsuite-notebooks
          readOnly: false
status: {}

---
#contrax-uwsgi

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-uwsgi
  name: contrax-uwsgi
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-uwsgi
    spec:
      containers:
      - args:
        - /start.sh
        - uwsgi
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /advanced/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: django.core.mail.backends.console.EmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: contrax-elasticsearch
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "9200"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: contrax-rabbitmq
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_UWSGI
          value: contrax-uwsgi
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: contrax1
        - name: DOCKER_RABBITMQ_USER
          value: contrax1
        - name: DOCKER_RABBITMQ_VHOST
          value: contrax1_vhost
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        image: {{ .Values.docker_image }}
        name: contrax-uwsgi
        resources:
          requests:
            cpu: {{ .Values.uwsgi_cpu_request }}
            memory: {{ .Values.uwsgi_memory_request }}
          limits:
            cpu: {{ .Values.uwsgi_cpu_limit }}
            memory: {{ .Values.uwsgi_memory_limit }}
        volumeMounts:
        - mountPath: /deployment_uuid
          name: contraxsuite-deployment-uuid
        - mountPath: /contraxsuite_services/staticfiles
          name: contraxsuite-static-files
        - mountPath: /contraxsuite_services/fixtures/additional
          name: contraxsuite-additional-fixtures
        - mountPath: /third_party_dependencies
          name: contraxsuite-third-party-dependencies
        - mountPath: /data/media
          name: contraxsuite-data-media
        - mountPath: /data/data_update
          name: contraxsuite-data-update
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /ssl_certs
          name: contraxsuite-ssl-certs
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: contraxsuite-deployment-uuid
        persistentVolumeClaim:
          claimName: contraxsuite-deployment-uuid
          readOnly: false
      - name: contraxsuite-static-files
        persistentVolumeClaim:
          claimName: contraxsuite-static-files
          readOnly: false
      - name: contraxsuite-additional-fixtures
        persistentVolumeClaim:
          claimName: contraxsuite-additional-fixtures
          readOnly: false
      - name: contraxsuite-third-party-dependencies
        persistentVolumeClaim:
          claimName: contraxsuite-third-party-dependencies
          readOnly: false
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
      - name: contraxsuite-data-update
        persistentVolumeClaim:
          claimName: contraxsuite-data-update
          readOnly: false
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: contraxsuite-ssl-certs
        persistentVolumeClaim:
          claimName: contraxsuite-ssl-certs
          readOnly: false
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-uwsgi
  name: contrax-uwsgi
spec:
  ports:
    - port: 3031
      protocol: TCP
  selector:
    io.kompose.service: contrax-uwsgi
status:
  loadBalancer: {}

---
#contrax-curator-metricbeat

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-curator-metricbeat
  name: contrax-curator-metricbeat
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-curator-metricbeat
    spec:
      containers:
      - args:
        - --host
        - contrax-elasticsearch
        - --port
        - "9200"
        env:
        - name: INDEX_PREFIX
          value: metricbeat-
        - name: KEEP_DAYS
          value: "3"
        - name: PERIOD
          value: 15min
        image: stefanprodan/es-curator-cron
        name: contrax-curator-metricbeat
        resources: {}
      restartPolicy: Always
status: {}

---
#contrax-curator-filebeat

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-curator-filebeat
  name: contrax-curator-filebeat
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-curator-filebeat
    spec:
      containers:
      - args:
        - --host
        - contrax-elasticsearch
        - --port
        - "9200"
        env:
        - name: INDEX_PREFIX
          value: filebeat-
        - name: KEEP_DAYS
          value: "30"
        - name: PERIOD
          value: 15min
        image: stefanprodan/es-curator-cron
        name: contrax-curator-filebeat
        resources: {}
      restartPolicy: Always
status: {}

---
#contrax-daphne

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-daphne
  name: contrax-daphne
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-daphne
    spec:
      containers:
      - args:
        - /start.sh
        - daphne
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /advanced/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: django.core.mail.backends.console.EmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: contrax-elasticsearch
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "9200"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: contrax-rabbitmq
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_UWSGI
          value: contrax-uwsgi
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: contrax1
        - name: DOCKER_RABBITMQ_USER
          value: contrax1
        - name: DOCKER_RABBITMQ_VHOST
          value: contrax1_vhost
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        - name: SHARED_USER_ID
          value: "82"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        image: {{ .Values.docker_image }}
        name: contrax-daphne
        resources: {}
        volumeMounts:
        - mountPath: /deployment_uuid
          name: contraxsuite-deployment-uuid
        - mountPath: /contraxsuite_services/staticfiles
          name: contraxsuite-static-files
        - mountPath: /contraxsuite_services/fixtures/additional
          name: contraxsuite-additional-fixtures
        - mountPath: /third_party_dependencies
          name: contraxsuite-third-party-dependencies
        - mountPath: /data/media
          name: contraxsuite-data-media
        - mountPath: /data/data_update
          name: contraxsuite-data-update
        - mountPath: /data/logs
          name: contraxsuite-logs
        - mountPath: /ssl_certs
          name: contraxsuite-ssl-certs
      restartPolicy: Always
      imagePullSecrets:
      - name: contraxsuitesecret
      volumes:
      - name: contraxsuite-deployment-uuid
        persistentVolumeClaim:
          claimName: contraxsuite-deployment-uuid
          readOnly: false
      - name: contraxsuite-static-files
        persistentVolumeClaim:
          claimName: contraxsuite-static-files
          readOnly: false
      - name: contraxsuite-additional-fixtures
        persistentVolumeClaim:
          claimName: contraxsuite-additional-fixtures
          readOnly: false
      - name: contraxsuite-third-party-dependencies
        persistentVolumeClaim:
          claimName: contraxsuite-third-party-dependencies
          readOnly: false
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
      - name: contraxsuite-data-update
        persistentVolumeClaim:
          claimName: contraxsuite-data-update
          readOnly: false
      - name: contraxsuite-logs
        persistentVolumeClaim:
          claimName: contraxsuite-logs
          readOnly: false
      - name: contraxsuite-ssl-certs
        persistentVolumeClaim:
          claimName: contraxsuite-ssl-certs
          readOnly: false
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-daphne
  name: contrax-daphne
spec:
  ports:
    - port: 3355
      protocol: TCP
  selector:
    io.kompose.service: contrax-daphne
status:
  loadBalancer: {}

---

#contrax-powa-web

apiVersion: v1
data:
  powa-web.conf: |-
    servers={
      'main': {
        'host': 'contrax-db',
        'port': '5432',
        'database': 'powa'
      }
    }
    cookie_secret="KAJsuasa&&As6a^Sfdsaxzc6sa"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-powa-web
  name: powa-web-configmap

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  labels:
    io.kompose.service: contrax-powa-web
  name: contrax-powa-web
spec:
  {{ if .Values.powa }}
  replicas: 1
  {{ else }}
  replicas: 0
  {{ end }}
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: contrax-powa-web
    spec:
      containers:
      - image: powateam/powa-web
        name: contrax-powa-web
        resources: {}
        volumeMounts:
        - mountPath: /etc/powa-web.conf
          name: contrax-powa-web
          subPath: powa-web.conf
      hostname: contrax-powa-web
      restartPolicy: Always
      volumes:
      - name: contrax-powa-web
        configMap:
          name: powa-web-configmap
status: {}

---

#Autoscaler

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: contrax-celery
  namespace: {{ .Values.namespace }}
spec:
  maxReplicas: {{ .Values.celery_replicas }}
  minReplicas: 1
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: contrax-celery
  targetCPUUtilizationPercentage: {{ .Values.celery_target_cpu_usage }}
status: {}

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: contrax-celery-doc-load
  namespace: {{ .Values.namespace }}
spec:
  maxReplicas: {{ .Values.celery_doc_load_replicas }}
  minReplicas: 1
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: contrax-celery-doc-load
  targetCPUUtilizationPercentage: {{ .Values.celery_doc_load_target_cpu_usage }}
status: {}
