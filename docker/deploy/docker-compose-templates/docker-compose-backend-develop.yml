version: "3.3"
services:
# Service names should comply with the rules of building DNS names - they will be available
# under these domain names inside the cluster virtual network.
# (Service names should not contain underscores.)

  contrax-redis:
    image: redis
    volumes:
      - redis_data:/data
    networks:
      - contrax_net
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    ports: #
      - 127.0.0.1:63790:6379 #

  contrax-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.3.0
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    configs:
      - source: elasticsearch_${ELASTICSEARCH_CONFIG_VERSION}
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - contrax_net
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '${DOLLAR}{DOCKER_ELASTICSEARCH_CPUS}'
          memory: ${DOLLAR}{DOCKER_ELASTICSEARCH_MEMORY}
      placement:
        constraints: [node.role == manager]
    ports: #
      - 127.0.0.1:19200:9200 #

  contrax-kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.3.0
    networks:
      - contrax_net
    depends_on:
      - contrax-elasticsearch
    environment:
      - "ELASTICSEARCH_URL=http://${DOLLAR}{DOCKER_HOST_NAME_ELASTICSEARCH}:9200"
      - "SERVER_BASEPATH=${DOLLAR}{DOCKER_KIBANA_BASE_PATH}"
    ports:
      - 127.0.0.1:5601:5601
    deploy:
      replicas: 1

  contrax-filebeat:
    image: docker.elastic.co/beats/filebeat:6.3.0
    user: root
    volumes:
      - postgres_data:/data/pg_data
      - contraxsuite_logs:/data/logs
      - filebeat_data:/usr/share/filebeat/data
      - contraxsuite_internal_nginx_logs:/data/nginx_logs
    configs:
      - source: filebeat_${FILEBEAT_CONFIG_VERSION}
        target: /usr/share/filebeat/filebeat.yml
    networks:
      - contrax_net
    depends_on:
      - contrax-elasticsearch
      - contrax-kibana
    deploy:
      mode: global
      resources:
        limits:
          cpus: '1'
          memory: 2GB

  contrax-nginx:
    image: nginx:stable
    networks:
      - contrax_net
    volumes:
      - contraxsuite_nginx_conf:/etc/nginx
      - contraxsuite_nginx_certs:/etc/nginx/certificates
      - contraxsuite_frontend:/contraxsuite_frontend
      - contraxsuite_static_files:/contraxsuite_services/staticfiles
      - contraxsuite_data_media:/data/media
      - contraxsuite_internal_nginx_logs:/var/log/nginx
      - contraxsuite_nginx_server_include:/etc/nginx/server_include
    configs:
      - source: nginx_cust_${NGINX_CUSTOMER_CONF_VERSION}
        target: /etc/nginx/nginx-customer.conf
    ports:
      - 0.0.0.0:80:8080
      - 0.0.0.0:443:4443
    depends_on:
      - contrax-uwsgi
      - contrax-jupyter
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  contrax-rabbitmq:
    image: rabbitmq:3-management
    hostname: contrax-rabbitmq
    networks:
      - contrax_net
    environment:
      - "RABBITMQ_DEFAULT_USER=${DOLLAR}{DOCKER_RABBITMQ_USER}"
      - "RABBITMQ_DEFAULT_PASS=${DOLLAR}{DOCKER_RABBITMQ_PASSWORD}"
      - "RABBITMQ_DEFAULT_VHOST=${DOLLAR}{DOCKER_RABBITMQ_VHOST}"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports: #
     - 127.0.0.1:56720:5672 #

  contrax-db:
    image: postgres:9.6
    environment:
      - "PGDATA=/var/lib/contraxsuite-postgres"
      - "POSTGRES_USER=${DOLLAR}{DOCKER_PG_USER}"
      - "POSTGRES_PASSWORD=${DOLLAR}{DOCKER_PG_PASSWORD}"
      - "POSTGRES_DB=${DOLLAR}{DOCKER_PG_DB_NAME}"
    command: postgres -c config_file=/etc/contraxsuite/postgresql.conf
    volumes:
      - postgres_data:/var/lib/contraxsuite-postgres
    configs:
      - source: pg_${PG_CONFIG_VERSION}
        target: /etc/contraxsuite/postgresql.conf
      - source: pg_init_sql_${PG_INIT_SQL_CONFIG_VERSION}
        target: /docker-entrypoint-initdb.d/postgres_init.sql
    networks:
      - contrax_net
    read_only: false
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '${DOLLAR}{DOCKER_POSTGRES_CPUS}'
          memory: ${DOLLAR}{DOCKER_POSTGRES_MEMORY}
      placement:
        constraints: [node.role == manager]
    ports: #
      - 127.0.0.1:54320:5432 #

  contrax-tika:
    image: lexpredict/tika-server:1.9
    networks:
      - contrax_net
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '${DOLLAR}{DOCKER_TIKA_CPUS}'
          memory: ${DOLLAR}{DOCKER_TIKA_MEMORY}
    ports: #
      - 127.0.0.1:9998:9998 #

volumes:
  contraxsuite_deployment_uuid:
  contraxsuite_nginx_conf:
  contraxsuite_nginx_certs:
  contraxsuite_static_files:
  contraxsuite_frontend:
  contraxsuite_third_party_dependencies:
  contraxsuite_data_media:
  contraxsuite_notebooks:
  contraxsuite_logs:
  contraxsuite_internal_nginx_logs:
  postgres_data:
  rabbitmq_data:
  elasticsearch_data:
  redis_data:
  filebeat_data:
  metricbeat_data:
  celery_worker_state:
  backup:
  contraxsuite_nginx_server_include:
  contraxsuite_additional_fixtures:
  contraxsuite_jupyter_add_req:
  contraxsuite_ssl_certs:

networks:
  contrax_net:

configs:
  filebeat_${FILEBEAT_CONFIG_VERSION}:
    file: ./filebeat.yml
  metricbeat_${METRICBEAT_CONFIG_VERSION}:
    file: ./metricbeat.yml
  elasticsearch_${ELASTICSEARCH_CONFIG_VERSION}:
    file: ./elasticsearch.yml
  pg_${PG_CONFIG_VERSION}:
    file: ./postgresql.conf
  pg_init_sql_${PG_INIT_SQL_CONFIG_VERSION}:
    file: ./postgres_init.sql
  nginx_cust_${NGINX_CUSTOMER_CONF_VERSION}:
    file: ./nginx-customer.conf
